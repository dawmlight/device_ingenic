#include <string.h>
#include <fstream>
#include "wifiConfig.hpp"

/*#############################################*\
 * crc7
 \*#############################################*/
static const uint8_t crc7_syndrome_table[256] = {
	0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f,
	0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
	0x19, 0x10, 0x0b, 0x02, 0x3d, 0x34, 0x2f, 0x26,
	0x51, 0x58, 0x43, 0x4a, 0x75, 0x7c, 0x67, 0x6e,
	0x32, 0x3b, 0x20, 0x29, 0x16, 0x1f, 0x04, 0x0d,
	0x7a, 0x73, 0x68, 0x61, 0x5e, 0x57, 0x4c, 0x45,
	0x2b, 0x22, 0x39, 0x30, 0x0f, 0x06, 0x1d, 0x14,
	0x63, 0x6a, 0x71, 0x78, 0x47, 0x4e, 0x55, 0x5c,
	0x64, 0x6d, 0x76, 0x7f, 0x40, 0x49, 0x52, 0x5b,
	0x2c, 0x25, 0x3e, 0x37, 0x08, 0x01, 0x1a, 0x13,
	0x7d, 0x74, 0x6f, 0x66, 0x59, 0x50, 0x4b, 0x42,
	0x35, 0x3c, 0x27, 0x2e, 0x11, 0x18, 0x03, 0x0a,
	0x56, 0x5f, 0x44, 0x4d, 0x72, 0x7b, 0x60, 0x69,
	0x1e, 0x17, 0x0c, 0x05, 0x3a, 0x33, 0x28, 0x21,
	0x4f, 0x46, 0x5d, 0x54, 0x6b, 0x62, 0x79, 0x70,
	0x07, 0x0e, 0x15, 0x1c, 0x23, 0x2a, 0x31, 0x38,
	0x41, 0x48, 0x53, 0x5a, 0x65, 0x6c, 0x77, 0x7e,
	0x09, 0x00, 0x1b, 0x12, 0x2d, 0x24, 0x3f, 0x36,
	0x58, 0x51, 0x4a, 0x43, 0x7c, 0x75, 0x6e, 0x67,
	0x10, 0x19, 0x02, 0x0b, 0x34, 0x3d, 0x26, 0x2f,
	0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
	0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04,
	0x6a, 0x63, 0x78, 0x71, 0x4e, 0x47, 0x5c, 0x55,
	0x22, 0x2b, 0x30, 0x39, 0x06, 0x0f, 0x14, 0x1d,
	0x25, 0x2c, 0x37, 0x3e, 0x01, 0x08, 0x13, 0x1a,
	0x6d, 0x64, 0x7f, 0x76, 0x49, 0x40, 0x5b, 0x52,
	0x3c, 0x35, 0x2e, 0x27, 0x18, 0x11, 0x0a, 0x03,
	0x74, 0x7d, 0x66, 0x6f, 0x50, 0x59, 0x42, 0x4b,
	0x17, 0x1e, 0x05, 0x0c, 0x33, 0x3a, 0x21, 0x28,
	0x5f, 0x56, 0x4d, 0x44, 0x7b, 0x72, 0x69, 0x60,
	0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38, 0x31,
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

WifiConfig::WifiConfig(std::string fn)
{
	filename = fn;
	readConfig();
	sync = false;
}

WifiConfig::~WifiConfig()
{
	if(wifiConfig)
		delete[] wifiConfig;
}

void WifiConfig::syncNetwork(std::vector<NetWorks>& network)
{
	for(int j = 0;j < network.size();j++){
		for(int i = 0;i < wifiConfigCount;i++){
			if(strcmp(network[j].ssid,wifiConfig[i].ssid) == 0){
				wifiConfig[i].netId = network[j].netId;
			}
		}
	}
	sync = true;
}

void WifiConfig::addConfig(const WifiDeviceConfig *config)
{
	int count = wifiConfigCount + 1;
	WifiDeviceConfig *w = new WifiDeviceConfig[count];
	if(wifiConfigCount > 0)
		memcpy(w,wifiConfig,wifiConfigCount * sizeof(WifiDeviceConfig));
	memcpy(&w[wifiConfigCount],config,sizeof(WifiDeviceConfig));
	if(!wifiConfig)
		delete[] wifiConfig;
	wifiConfig = w;
	wifiConfigCount = count;
	saveConfig();
	sync = false;
}
void WifiConfig::delConfig(int netId)
{
	if(wifiConfigCount == 0)
		return;
	if(wifiConfigCount == 1)
	{
		delete[] wifiConfig;
		wifiConfig = NULL;
		wifiConfigCount = 0;

	}else{
		wifiConfigCount--;
		WifiDeviceConfig *w = new WifiDeviceConfig[wifiConfigCount];
		int wc = 0;
		for(int i = 0;i < wifiConfigCount + 1;i++){
			if(wifiConfig[i].netId != netId){
				memcpy(&w[wc],&wifiConfig[i],sizeof(WifiDeviceConfig));
			}
		}
		delete[] wifiConfig;
		wifiConfig = w;
	}
	saveConfig();
	sync = false;
}

uint8_t WifiConfig::crc7_byte(uint8_t crc, uint8_t data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
}

uint8_t WifiConfig::crc7(uint8_t crc, uint8_t *buffer, int len)
{
	while (len--)
		crc = crc7_byte(crc, *buffer++);
	return crc;
}

void WifiConfig::readConfig()
{
	std::ifstream in(filename.c_str(),std::ios::in | std::ios::binary);
	if(!in.good()){
		HILOG_W("open %s read failed. %s",filename.c_str(),strerror(errno));
		return;
	}
	uint32_t v;
	uint32_t count;

	in.read((char*)&v,sizeof(v));
	in.read((char*)&count,sizeof(count));
	uint8_t *crc = new uint8_t[count];
	in.read((char*)crc,count);
	wifiConfig = new WifiDeviceConfig[count];
	int wc = 0;
	for(int i = 0;i < count;i++) {
		in.read((char*)&wifiConfig[wc],sizeof(WifiDeviceConfig));
		uint8_t mcrc = crc7(0,(uint8_t*)&wifiConfig[i],sizeof(WifiDeviceConfig));
		if(mcrc == crc[i]){
			wc++;
		}
	}
	wifiConfigCount = wc;
	dumpConfig();
	delete[] crc;
	in.close();
}

void WifiConfig::dumpConfig()
{
	for(int i = 0;i < wifiConfigCount;i++){
		printf("=========== %d ===========\n",i);
		printf("ssid: %s\n",wifiConfig[i].ssid);
		printf("preSharedKey: %s\n",wifiConfig[i].preSharedKey);
		printf("securityType: %d\n",wifiConfig[i].securityType);
		printf("netId: %d\n",wifiConfig[i].netId);
	}
}

void WifiConfig::saveConfig()
{
	if(!wifiConfig)
		return;
	std::ofstream out(filename.c_str(),std::ios::out | std::ios::binary);
	if(!out.good()){
		HILOG_E("open %s write failed. %s",filename.c_str(),strerror(errno));
		return;
	}
	uint32_t v = 0;
	uint32_t count = wifiConfigCount;
	out.write((char*)&v,sizeof(v));
	out.write((char*)&count,sizeof(count));
	if(count > 0){
		uint8_t *crc = new uint8_t[count];
		for(int i = 0;i < count;i++){
			crc[i] = crc7(0,(uint8_t*)&wifiConfig[i],sizeof(WifiDeviceConfig));
		}
		out.write((char*)crc,count);
		out.write((char*)wifiConfig,count * sizeof(WifiDeviceConfig));
		delete[] crc;
	}
	out.close();
}
